{"version":3,"sources":["Note.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","lable","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObj","post","put","App","props","useState","notes","setNote","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNote","console","log","length","noteToShow","filter","map","find","n","changeNote","returnedNote","catch","error","alert","onSubmit","event","preventDefault","noteObj","Date","toISOString","Math","random","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qNAYeA,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,+BACKH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCN1CI,EAAU,aAuBD,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAK,IACLP,QAAU,mCACVQ,KAAO,2BACPT,WAAY,GAEhB,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADiBT,IAAMU,KAAKZ,EAASW,GACtBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADiBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAChCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCgE9BK,EAhFH,SAACC,GACX,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA6BF,mBAAS,oBAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAUAC,qBAAU,WACRC,IAEGjB,MAAK,SAAAkB,GACJP,EAAQO,QAEX,IAEHC,QAAQC,IAAI,SAASV,EAAMW,OAAO,SAElC,IAkCMC,EAAaR,EAAUJ,EAAQA,EAAMa,QAAO,SAAApC,GAAI,OAAuB,IAAnBA,EAAKG,aAE/D,OACC,gCACE,sCACA,8BACE,yBAAQE,QAAS,kBAAMuB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACIQ,EAAWE,KAAI,SAAArC,GAAI,OACpB,cAAC,EAAD,CAAsBA,KAAMA,EAC5BC,iBAAkB,kBA/CC,SAACU,GACxB,IAAMX,EAAOuB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAU,2BAAOxC,GAAP,IAAaG,WAAYH,EAAKG,YAE9C2B,EAAmBnB,EAAI6B,GACtB3B,MAAK,SAAA4B,GACJjB,EAAQD,EAAMc,KAAI,SAAArC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOyC,SACjDC,OAAM,SAAAC,GACPC,MAAM,aAAD,OAAc5C,EAAKI,QAAnB,yBACLoB,EAAQD,EAAMa,QAAO,SAAAG,GAAC,OAAIA,EAAE5B,KAAOA,SAsCVV,CAAiBD,EAAKW,MADhCX,EAAKW,SAGrB,uBAAMkC,SApCO,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAU,CACd5C,QAAUqB,EACVb,MAAO,IAAIqC,MAAOC,cAClBvC,GAAKY,EAAMW,OAAS,EACpB/B,UAAYgD,KAAKC,SAAW,IAG9BtB,EAAmBkB,GAClBnC,MAAK,SAAA4B,GACJjB,EAAQD,EAAMP,OAAOyB,IACrBf,EAAW,QAwBZ,UACE,uBAAO2B,MAAO5B,EAAS6B,SArBH,SAACR,GACxBd,QAAQC,IAAKa,EAAMS,OAAOF,OAC1B3B,EAAWoB,EAAMS,OAAOF,UAoBrB,wBAAQG,KAAK,SAAb,yBCnEQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCuBdO,IAASC,OACT,cAAC,EAAD,IACAC,SAASC,eAAe,SAQxBX,M","file":"static/js/main.64a42c43.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const lable = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{lable}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note;","import axios from \"axios\";\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = { \r\n        id : 1000,\r\n        content : 'This note is not saved to server',\r\n        date : '2019-05-30T17:30:31.098Z',\r\n        important : true\r\n     }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObj => {\r\n    const request =  axios.post(baseUrl, newObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObj) => {\r\n    const request =  axios.put(`${baseUrl}/${id}`, newObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState,useEffect } from 'react';\nimport './App.css';\nimport Note from './Note';\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNote] = useState([])\n  const [newNote, setNewNote] =useState('note baruuu !!!!')\n  const [showAll, setShowAll] = useState(true)\n\n  // const hook = () => {\n  //   console.log('effect')\n  //   axios.get('http://localhost:3001/notes')\n  //   .then(response => setNote(response.data))\n  // }\n\n  // useEffect(hook, [])\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNote => {\n        setNote(initialNote)\n      })\n  }, [])\n      \n  console.log('render',notes.length,'notes')\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changeNote = {...note, important: !note.important}\n\n    noteService.update(id, changeNote)\n    .then(returnedNote => {\n      setNote(notes.map(note => note.id !== id ? note : returnedNote))\n    }).catch(error => {\n      alert(`the note '${note.content}' was alredy deleted`)\n      setNote(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObj = {\n      content : newNote,\n      date : new Date().toISOString(),\n      id : notes.length + 1,\n      important : Math.random() < 0.5 \n    }\n\n    noteService.create(noteObj)\n    .then(returnedNote => {\n      setNote(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log (event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const noteToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  return (\n   <div>\n     <h1>Note</h1>\n     <div>\n       <button onClick={() => setShowAll(!showAll)}>\n         show {showAll ? 'important' : 'all'}\n       </button>\n     </div>\n     <ul>\n        {noteToShow.map(note => \n        <Note key = {note.id} note={note} \n        toggleImportance={()=> toggleImportance(note.id)}/>)}\n     </ul>\n     <form onSubmit={addNote} >\n       <input value={newNote} onChange={handleNoteChange}/>\n       <button type='submit'>save</button>\n     </form>\n   </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// const http = require('http')\n\n// const app = http.createServer((request, response) => {\n//   response.writeHead(200, {'Content-Type' : 'text/plain'})\n//   response.end('hello world')\n// })\n\n// const PORT = 3001\n// app.listen(PORT)\n// console.log(`server runing on ${PORT}`)\n\n// const promise2 = axios.get('http://localhost:3001/foobar')\n// console.log(promise2)\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     ReactDOM.render(\n//       <App notes = {notes} />,\n//     document.getElementById('root')\n//   );\n//   })\n\nReactDOM.render(\n<App />,\ndocument.getElementById('root'))\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//  \"server\": \"json-server -p3001 --watch db.json\"\nreportWebVitals();\n"],"sourceRoot":""}